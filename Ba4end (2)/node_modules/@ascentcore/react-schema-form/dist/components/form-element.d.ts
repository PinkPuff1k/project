import { ReactNode } from 'react';
import ComponentRegistry, { RegistryKeys } from '../component-registry';
import ajv from 'ajv';
export interface SchemaProperty {
    $ref?: string;
    items?: SchemaProperty;
    type?: string;
    title?: string;
    description?: string;
    properties?: {
        [key: string]: SchemaProperty;
    };
    required?: string[];
    enum?: string[];
    options?: {
        [key: string]: string;
    }[];
    labelKey?: string;
    valueKey?: string;
    minimum?: number;
    maximum?: number;
    default?: any;
    contentEncoding?: string;
    contentMediaType?: string;
    if?: any;
    then?: any;
    else?: any;
    const?: any;
    instanceof?: string;
    definitions?: any;
    allOf?: SchemaProperty[];
    anyOf?: SchemaProperty[];
    oneOf?: SchemaProperty[];
    dependencies?: {
        [key: string]: string[] | SchemaProperty;
    };
    path?: string;
    registryKey?: string;
    error?: ajv.ErrorObject[] | boolean;
    isRequired?: boolean;
    className?: string;
}
interface FormElementProperties {
    root: SchemaProperty;
    parentSchema: any;
    schema: SchemaProperty;
    path: string;
    value: any;
    errors: ajv.ErrorObject[];
    wrapper?: ReactNode;
    config?: {
        registry?: RegistryKeys;
        exceptions?: {
            paths?: RegistryKeys;
            keys?: RegistryKeys;
        };
    } | null;
    error: ajv.ErrorObject[] | boolean;
    handleParentChange: (value: any, childPath: string) => void;
    registry: ComponentRegistry;
}
export default function FormElement({ root, parentSchema, schema, path, value, errors, error, handleParentChange, registry, wrapper, config }: FormElementProperties): JSX.Element;
export {};
